      SUBROUTINE STERNB
!                                                                       
!.... GENERATE STAR OF G                                                
!     Modified version that only uses smallest set of values
!                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)
      INCLUDE 'param.inc'
      INTEGER    G,STG,IND(NSYM)
      real*8 invoiz

!_COMPLEX      COMPLEX*16 taup
      COMMON /FOUR/  G(3),NST,STG(3,NSYM),TAUP(NSYM)                    
      COMMON /SYM2/ IZ(3,3,NSYM),TAU(3,NSYM),IORD   
!      COMMON /SYM2/ tau(3,NSYM),otau(3,NSYM),oiz(3,3,NSYM), &
!         invoiz(3,3,NSYM),iz(3,3,NSYM),iord
      logical use(nsym)
      integer taumult(nsym)

!     DATA           TPI/6.2831853071796/, IMAG/(0.,1.)/                
!---------------------------------------------------------------------  
!                                                                       
       save tpi,getpi,icalled
       logical getpi
       data getpi/.true./,icalled/0/
       if(getpi)then
                getpi=.false.
                pi=acos(-1.D0)
                TPI=2.D0*PI
        endif

      NST=0                                                             
      DO 1 I=1,IORD                                                     
         TK=0.                                                          
         DO 2 J=1,3                                                     
            TK=TK+TAU(J,I)*G(J)*TPI                                     
            K=0                                                         
            DO 3 L=1,3                                                  
               K=IZ(J,L,I)*G(L)+K                                       
 3          CONTINUE                                                    
            STG(J,I)=K                                                  
 2       CONTINUE                                                       
         IF(NST.EQ.0) GOTO 7                                            
         DO 4 M=1,NST                                                   
            DO 5 J=1,3                                                  
               IF(STG(J,M).NE.STG(J,I)) GOTO 4                          
 5          CONTINUE                                                    
            IND(M)=IND(M)+1                                             
!_COMPLEX    TAUP(M)=TAUP(M)+cmplx(cos(tk),sin(tk))
!_REAL       TAUP(M)=TAUP(M)+cos(tk)
            GOTO 1                                                      
 4       CONTINUE                                                       
 7       NST=NST+1                                                      
         DO 6 J=1,3                                                     
            STG(J,NST)=STG(J,I)                                         
 6       CONTINUE                                                       
         IND(NST)=1                                                     
!_COMPLEX TAUP(NST)=cmplx(cos(tk),sin(tk))
!_REAL    TAUP(NST)=cos(tk)
 1    CONTINUE                                                          
      DO 10 I=1,NST                                                     
  10  TAUP(I)=TAUP(I)/IND(I)                                            
!
!     We will save time by eliminating redundant values
      do I=1,NST
        use(i)=.true.
        taumult(i)=1
      enddo
!     Look for duplicates
      DO I=1,NST-1
        DO J=I+1,NST
          IF(use(i) .and. use(j) )then
!               Is it the same
                IF ( (STG(1,J) .eq. STG(1,I) ) .and. &
                     (STG(2,J) .eq. STG(2,I) ) .and. &
                     (STG(3,J) .eq. STG(3,I) ) ) then
!_REAL                  if (abs(TAUP(J)-TAUP(I)) .lt. 1D-10)then
!_COMPLEX               if ( TAUP(J) .eq. TAUP(I) ) then
!                       YES
!_REAL                          use(j)=.false.
!_REAL                          taumult(i)=taumult(i)+1
                        endif
                else
!       Conjugate, for real only
!_REAL                  IF (    (STG(1,J) .eq. -STG(1,I) ) .and. &
!_REAL                          (STG(2,J) .eq. -STG(2,I) ) .and. &
!_REAL                          (STG(3,J) .eq. -STG(3,I) ) ) then
!_REAL                          if (abs(TAUP(J)-TAUP(I)) .lt. 1D-10)then
!                                       YES
!_REAL                                  use(j)=.false.
!_REAL                                  taumult(i)=taumult(i)+1
!_REAL                          endif
!_REAL                  endif
                endif
         endif
        enddo
      enddo
!     How many new points ?
      ii=0
      do i=1,nst
        if(use(i))ii=ii+1
      enddo
!     We later divide by nst, but we are changing this to ii
!     We should adjust for this, but not any longer since we now
!     have the true values
      rescale = dble(ii)/dble(nst)
      do i=1,nst
        taup(i)=taup(i)*taumult(i)*rescale
      enddo
!     Shuffle down
      ii=0
      do i=1,NST
        if(use(i)) then
          ii=ii+1
          STG(1,ii)=stg(1,i)
          STG(2,ii)=stg(2,i)
          STG(3,ii)=stg(3,i)
          TAUP(ii)=TAUP(i)
        endif
      enddo
!      if(icalled .lt. 100)then
!        write(6,66)ii,nst,rescale
!        do i=1,ii
!                write(6,67)i,stg(1,i),stg(2,i),stg(3,i),taup(i)
!        enddo
66      format('Reduction ',2i4,D18.8)
67      format('Reduced:  ',4i4,D18.8)
!        icalled=icalled+1
!      endif
      NST=II
      RETURN                                                            
      END                                                               
