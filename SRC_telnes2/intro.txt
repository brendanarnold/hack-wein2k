!BOI
! !TITLE: {\sf ELNES } Code Developers' Guide\\(version 1.0)
! !AUTHORS: K. Jorissen
! !AFFILIATION: EMAT, University of Antwerp, Belgium
! !INTRODUCTION: Introduction
!   Welcome to the {\sf ELNES} code developers' manual! If you're
!   reading this then you would presumably like to understand, change or
!   contribute to the code. This automatically generated manual is intented to
!   make that task as easy as possible.
!   \subsection{Authors}
!   ELNES replaces the TELNES program, which was written by Pierre-Henri Louf
!   and Michael Nelhiebel of Vienna.
!   \newline ELNES was written by Kevin Jorissen (Antwerp).
!   \newline This manual and the Users' Guide were written by Kevin Jorissen (Antwerp).
!   \subsection{References}
!   The official reference for the TELNES program is
!   \newline ELNES has not been published yet at the time of writing.
!   \subsection{Other documentation}
!    The ELNES package contains a users' guide as well.  Most of the information
!    contained in that document is not repeated here.
!   \subsection{Libraries?}
!    The ELNES program does not require any routines not contained in the package.
!   \subsection{Redundancy?}
!    The package might be made more compact, at the price of less transparency -
!    a price I am not willing to pay.
!   \newline Eg., there are four major output routines for each kind of spectrum that
!    can be calculated.  The four routines are quite similar and could be joined into
!    one routine, but that would be messy.
!   \subsection{Licensing}
!    ELNES is at this time only released as a part of the WIEN2k package.
!    If you have obtained the code in any other way, please contact the
!    authors of the WIEN2k package (see www.wien2k.at) for a license.
!   \subsection{Contributing}
!    You are most welcome to contribute to software or documentation.
!    A lot of effort has been put into this program, which is given to you for
!    practically no money; it would be nice if you share your improvements with us, too.
!
!    Please contact the author (kevin.jorissen@ua.ac.be) or the WIEN2k community
!    (use the wien2k mailing list) for reports and contributions.
!
!   \subsection{Programming conventions}
!   The {\sf ELNES} code is specifically written with the developer in mind.
!   It is modular, clearly written (sometimes at the expense of efficiency) and
!   fully documented. Large scientific codes often have many contributors each
!   with a different way of writing code. As a consequence of this,
!   well-established codes tend to be difficult to understand especially for new
!   authors. Such codes can also have complex interdependancies which must be
!   resolved when changing any part of the program. In order to keep the
!   {\sf ELNES} code free of such problems, any contributor should therefore
!   adhere to the following programming conventions.
!   \begin{itemize}
!   \item Strict ANSI Fortran90 should be used. Features which are marked as
!    obsolescent in F90/95 should be avoided. These include assigned format
!    specifiers, labeled do-loops, computed goto statements and statement
!    functions.
!   \item Modules should be used in place of common blocks for declaring
!    global variables. Use the existing modules to declare new global variables.
!   \item Any code should be written in lower-case free source form.
!   \item Every function or subroutine, no matter how small, should be in its
!    own file named {\tt routine.f}, where {\tt routine} is the function or
!    subroutine name. It is recommended that the routines are named so as to
!    make their purpose apparent from the name alone.
!   \item Use of {\tt implicit none} is mandatory and not negotiable. Remember
!    also to define the {\tt intent} of any passed arguments.
!   \item The use of {\tt goto} statements should be kept to a mininum. They
!    should be used for exiting loops only and always point to a {\tt continue}
!    statement.
!   \item Local allocatable arrays must be deallocated on exit of the routine to
!    prevent memory leakage. Use of automatic arrays should be limited to arrays
!    of small size.
!   \item Every function or subroutine must be documented with the {\tt Protex}
!    source code documentation system. This should include a short \LaTeX\
!    description of the algorithms and methods involved. Equations which need to
!    be referenced should be labeled with {\tt routine1}, {\tt routine2} etc.
!    The authorship of each new piece of code or modification should be indicated
!    in the {\tt REVISION HISTORY} part of the header. See the {\tt Protex}
!    documentation for details.
!   \item Ensure as much as possible that a routine will terminate the program
!    when given improper input instead of continuing with erroneous results.
!    Specifically, functions should have a well-defined domain for which they
!    return accurate results. Input outside that domain should result in an
!    error message and termination. All real functions should be accurate to
!    machine precision within their given domain.
!   \item To avoid silly and hard to trace errors, type conversions should be done
!    explicitly as much as possible, and data initialization should be done with
!    sufficient accuracy.
!   \item We have chosen to work with 8 byte real variables in the complete package.
!    Remark that in the wien2k tetra package, 4 byte real variables are used.
!    Indeed, the precision of the qtl input in wien2k makes the extra accuracy of
!    our 8 byte variables in tetraforelnes an illusion.  We have used 8 bytes for
!    tetraforelnes only for consistency.  It is not fully unimaginable that this
!    will, in some extreme cases with many bands and many k-points, cause tetraforelnes
!    to exceed the available memory.  But I doubt this, especially since with Pavel
!    Novak's qtl-program, the need for full k-meshes will disappear.
!   \item Report errors prior to termination with a standard consise description,
!    for example:
!    \begin{verbatim}
!     write(*,*)
!     write(*,'("Error(readparam): invalid spnst : ",I8)') spnst(is)
!     write(*,'(" for species ",I4)') is
!     write(*,*)
!    \end{verbatim}
!   \item Avoid redundant or repeated code: check to see if the routine you need
!    already exists, before writing a new one.
!   \end{itemize}
!   \subsection{How rigorous have we been?}
!    The ELNES program was not written from scratch.  It absorbed many routines from
!    other packages, most importantly the wien packages lcore (for the calculation of
!    core states) and tetra (for the calculation of density of states).
!    I have adapted routines from these packages where necessary and possible.  However:
!    \newline * lcore (hfsd and its subroutines) is the oldest, messiest fortran on the planet,
!      and frankly, it's quite unreadable;
!    \newline * tetra is f90, but it contains a lot of junk, hopelessly outdated comments, etc. ;
     which basically means it's a lot of work to translate these routines into clear,
!    modern fortran. \newline  As for the tetra package, most likely this package will change in
!    the near future, and therefore I want to keep my version as close to the official
!    (i.e., messy) version as possible; if not, updates will become very hard indeed.
!    \newline As for the lcore routines, I have fully rewritten the two most important routines,
!    being hfsd and insld, but have left the others practically untouched.  Basically
!    because I do not understand them, and do not feel like studying them at all.
!
!    This is no excuse for adding new routines not complying with the rules outlined above.
!    Any addition or change to the package MUST follow the programming rules above.

!   \subsection{Units}
!    The program mixes several units.
!    \newline All lengths are in atomic units (or inverse atomic units).
!    \newline Energies may be in eV, Ry, or Ha.
!    \newline One standard energy unit might be better, however :
!    \newline * Ha is used internally in the lcore routines in a few places;
!    \newline * Ry is used in the tetra routines and also in the lcore routines
!    \newline * eV is really the most practical unit for the main program itself, since this is what
!      everybody (in spectroscopy) finds most practical.  So all input from case.innes is
!      in eV, and the energy grid is also in eV.
!    \newline The spectrum is believed to be calculated in atomic units.
!   \subsection{Non-wien2k calculations?}
!    It would be interesting to interface the ELNES program to other electronic
!    structure codes, but at the moment, no such thing is possible.
!    \newline Basically, one would have to :
!    \newline * get crystallographic data from another source than case.struct in ReadStruct;
!    \newline * get cross-charges from another source than case.qtl in tetra packace, or
!      \newline get cross-dos from another source than case.xdos in ReadCrossDOS;
!    \newline * read core wavefunctions from a file (this is implemented), or implement
!      a routine for calculating them (one could alter insld to read the 
!      potential from a non-wien source);
!    \newline * read final state radial functions from a file (key is present, but no
!      further implementation is done);
!
!    In any case, users wishing to embark on such a project are welcome to contact
!    the developers for support.
!   \\\\
!   \subsection{Program Flow}
!    The program flow of the ELNES program is sketched in figure \ref{fig:ProgFlow}.
!    Only the most important routines are rendered.
!   \subsection{Dependencies}
!    The dependencies of all routines (i.e., the full calling tree) is sketched
!    in figure \ref{fig:Depend}.  Only a few small functions have been omitted
!    (ConversionDegRad,WaveLength,Fact,FactLn,FactRl,BessJ0,BessJ1), as well as the routines
!    for error handling (OutErr,ErrClr,ErrFlg) and the routine Gtfnam.
!   \\\\
!   Kevin Jorissen\\
!   Antwerp, 2004
!
!\newpage
!\begin{figure}[hbt]
!\unitlength=0.8mm \caption{\it ELNES Program Flow. 
! \label{fig:ProgFlow}}
!\begin{center}
!\includegraphics[width=12cm]{ELNES_Program_Flow.eps} 
!%\begin{picture}(150,190)(0,0)
!%   \epsfxsize=120mm
!% \epsfbox{ELNES_Program_Flow.eps}
!%\end{picture}
!\end{center}
!\end{figure}

!\newpage
!\begin{figure}[hbt]
!\unitlength=0.8mm \caption{\it ELNES Dependencies. 
! \label{fig:Depend}}
!\begin{center}
!\includegraphics[width=10.5cm]{ELNES_Dependencies.eps} 
!%\begin{picture}(150,190)(0,0)
!%   \epsfxsize=120mm
!% \epsfbox{ELNES_Dependencies.eps}
!%\end{picture}
!\end{center}
!\end{figure}
!\newpage
!EOI
