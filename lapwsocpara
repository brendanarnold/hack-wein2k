#!/bin/csh -f
#
# $Revision: 1.1 $
# $Date: 1998/04/06 09:24:55 $
#
# $Author: pblaha $
# $Source: /zeus/lapw/WIEN97/bin/RCS/lapwsopara,v $
# $State: Exp $
# 

set tmp  = .tmp_lapwsopara.$$
set tmp2 = .tmp_lapwsopara.$$_2
rm .tmp_lapwsopara.*  >&/dev/null
rm .lapwsopara.* >&/dev/null
touch .lock_
foreach i (.lock_*)
    rm $i
end

onintr exit
set name	= $0
set bin		= $name:h	#default directory for WIEN-executables
if !(-d $bin) set bin = .

unalias rm
alias   testinput       'if (! -e \!:1 ||  -z \!:1) goto \!:2'
alias   testerror       'if (! -z \!:1.error) goto error'

set t	    = time  
set log     = :parallel
set defmach = `hostname`
set updn			# spinpolarization switch
#set dnup    = 'dn'		# spinpolarization switch
set dnup    =	                # spinpolarization switch
set sc				# semicore-switch
set remote = ssh
set init = init:
set res  = residue:
set scratch =                   #eg: /scr1/pblaha/   for vectors, help-files,

if ( $?SCRATCH ) then
  set scratch=`echo $SCRATCH  | sed -e 's/\/$//'`/ # we are afraid
				# different settings in different 
				# computing centers
			        #use global variable for scratch if set
endif
############################################################################
# In this section use 0 to turn of an option, 1 to turn it on, 
# respectively choose a value

set useremote   = 1             # using remote shell to launch processes
set delay       = 1             # delay launching of processes by n seconds
set debug       = 0             # set verbosity of debugging output

############################################################################

############################################################################
# and now we look if we should override the defaults
if (-e $bin/parallel_options) then
   source $bin/parallel_options
endif


if ( $?USE_REMOTE ) then
        set useremote = $USE_REMOTE
endif

############################################################################

if ($#argv < 1) then
	echo usage: $0 deffile
	exit
endif

while ($#argv)
  switch ($1)
  case -h:
  case -H: 
    set help
    shift; breaksw
  case -up:
    set updn = 'up'
    set dnup = 'dn'
    shift; breaksw
  case -dn:
    set updn = 'dn'
    set dnup = 'up'
    shift; breaksw
  case -sc:
    set sc = 's'
    shift; breaksw
  case -so:
    set so = 'so'
    shift; breaksw
  default:
    set def = $1:r
    shift; breaksw
  endsw
end

set exe = $bin/lapwso
set exe = lapwso

#are we running parallel?
testinput .processes single
echo "running LAPWSO in parallel mode"
echo "RUNNING" >.lapwsopara

#before we start, we wipe away all parallel error files
if ( -e lapwso.error ) rm *lapwso*.error
if ( -e lapwso_1.error ) rm *lapwso_*.error
#if ( -e uplapw2_1.error ) rm *lapw2_*.error
#if ( -e dnlapw2_1.error ) rm *lapw2_*.error
if ( -e .timeso_1) rm .timeso_*


if (-e .machines.help) rm .machines.help

grep -v $init .processes|grep : | grep -v $res >$tmp2
set mist     = `wc $tmp2 `
set maxproc  = $mist[1]
set machine  = `grep $init .processes |cut -f2 -d: | xargs`
if ($#machine > $maxproc) then
    set machine  = `grep $init .processes |head -$maxproc| cut -f2 -d: | xargs`
endif

set lockfile = `cut -f2 -d: $tmp2 | awk '{print $1 NR}'|xargs`
set residue  = `grep $res .processes|cut -f2 -d:`
if ($residue == "") unset residue

if ($debug > 0) echo machines: $machine


echo "** " Error in Parallel LAPWSO >$def.error


#get name of case
setenv PWD `pwd|sed "s/tmp_mnt\///"`
#echo $PWD
setenv PWD $cwd
set case    = $PWD
set case    = $case:t          
if ($case == "") then
  echo "ERROR: no case.inst-file -> exit"
  exit 1
endif
set case    = $case:r           #head of file-names
if ($debug > 0) echo Setting up case $case for parallel execution
if ($debug > 0) echo of LAPWSO
if ($debug > 0) echo "  "
#
#NFS-bug
touch $case.scfso_1 $case.vectorso_1 $case.vect1_1 $case.normso_1 $case.energyso_1 $case.energydum_1
rm $case.scfso_* $case.vectorso*_* $case.vect1_* $case.normso*_* $case.energyso*_* $case.energydum*_*


#creating  def files
if ($debug > 0) echo " "
if ($debug > 0) echo -n "creating "$def"_*.def:  "
set i = 1
while ($i <= $maxproc)
  if ($debug > 0) echo -n "$i "
  cp $def.def .tmp
  #subsituting in files:
  cat <<theend >.script
s/vectorsodn/&_$i/w .mist
s/vectorso$updn/&_$i/w .mist
s/vectorup/&_$i/w .mist
s/vector$dnup/&_$i/w .mist
s/energysodn/&_$i/w .mist
s/energyso$updn/&_$i/w .mist
s/energydum/&_$i/w .mist
s/energyup/&_$i/w .mist
s/energy$dnup/&_$i/w .mist
s/vect1/&_$i/w .mist
s/outputso/&_$i/w .mist
s/scfso/&_$i/w .mist
s/normsodn/&_$i/g
s/normsoup/&_$i/g
s/$case.norm/&_$i/g

theend

  sed -f .script .tmp > .tmp1
  sed "s/vector_${i}dn_$i/vectordn_$i/" .tmp1>.tmp2 
  sed "s/vector_${i}up_$i/vectorup_$i/" .tmp2>.tmp1
  sed "s/vector_${i}so_$i/vectorso_$i/" .tmp1>.tmp2 
  sed "s/vectorso_${i}dn_$i/vectorsodn_${i}/" .tmp2>.tmp1 
  sed "s/energy_${i}up_$i/energyup_$i/" .tmp2>.tmp1
  sed "s/energy_${i}dn_$i/energydn_$i/" .tmp1>.tmp2 
  sed "s/energy_${i}so_$i/energyso_$i/" .tmp2>.tmp1 
  sed "s/energyso_${i}dn_$i/energysodn_${i}/" .tmp1>.tmp2 
  sed "s/energy_${i}dum_$i/energydum_$i/" .tmp2>.tmp1 
  sed "s/norm_${i}sodn_$i/normsodn_$i/" .tmp1>.tmp2 
  sed "s/norm_${i}soup_$i/normsoup_$i/" .tmp2>"$def"_$i.def 
  @ i ++
end
if ($debug > 0) echo " "


#starting processes
if ($debug > 0) echo " "
if ($debug > 0) echo "starting process:  "

echo "->  "starting parallel lapwso at `date` >>$log

set loop    = 0
set endloop = 0
set runmach = ""
echo "files:$maxproc" >.processes2
# change working dir because of problems with automounted directories
#   cd $cwd
while ($loop < $maxproc)
  set p = 1
  if ($?residue && $?resok) set p = 2
  while ($p <= $#machine)
    if ($loop < $maxproc) then
	if !(-e .lock_$lockfile[$p]) then
	    @ loop ++
	    echo "${loop}:${maxproc}" >.processes2
	    if ($debug > 0) echo prepare $loop on $machine[$p]
	    set runmach = ($runmach $machine[$p])
	    echo $runmach >>.processes2
	    if ($debug > 1) echo "   >  $exe ${def}_${loop}.def on $machine[$p]"
	    if ($debug > 1) echo "   >  $exe ${def}_${loop}.def on $machine[$p]">>$log
	    if ($useremote == 1) then
	    if ($debug > 1) echo use remote
		touch .lock_$lockfile[$p]
		echo -n "$runmach[$loop] ">.timeso_$loop
		($remote $machine[$p] "cd $PWD;$t $exe ${def}_${loop}.def;rm -f .lock_$lockfile[$p]") >>.timeso_$loop  &
	 else
		if ($debug > 1) echo not using remote shell
		touch .lock_$lockfile[$p]
		echo -n "$runmach[$loop] " >.timeso_$loop
		(cd $PWD;$t $exe ${def}_${loop}.def;rm -f .lock_$lockfile[$p]) >>.timeso_$loop  &
	    endif
	endif
    if ($debug > 1) echo sleeping for $delay seconds
    sleep $delay
            jobs -l >.lapwsopara.$$.`hostname`
    endif
    @ p ++
  end
end

#wait for execution to be completed
if ($debug > 0) echo " "
if ($debug > 0) echo "waiting for processes:  "
wait


set i = 1
while ($i <= $maxproc)
  testerror "$def"_$i
  @ i ++
end

#cpu summary:
set i = 1
while ($i <= $maxproc)
    echo "      "`cat .timeso_$i`
    echo "      "`cat .timeso_$i` >>$log
    @ i ++
end

# postanalysis
echo "   Summary of lapwsopara:" >$tmp
set p = 1
while ($p <= $#machine)
    set m = $runmach[$p]
    cat .timeso_* | grep $m | tr "():" " " | \
	    awk '{u += $2; cl += 60*$4+$5} \
		END {print "   '$m'\t user=" u "\t wallclock=" cl}' >>$tmp
    @ p ++
end

uniq < $tmp |tee -a $log

echo "<-  "done at `date` >>$log

#
#Correcting scfso file
#cp $case.scfso_1 $case.scfso
sed "/END/q" <$case.klist >$case.klist.tmp
set mist = `wc $case.klist.tmp`
set klist = $mist[1]
@ klist -- 
sed "/NUMBER OF K-POINTS:/s/[0-9].*/$klist/" < $case.scfso_1 >$case.scfso

#Copying of vectordum files
#set i = 1
#while ($i <= $maxproc)
#    cp $case.energydum_$i $case.energydumup_$i
#    cp $case.energydum_$i $case.energydumdn_$i
#    @ i ++
#end

#Concatenate norm-files (for qtls)
if($updn == 'up' ) then
  cat $case.normsoup_1 > $case.normsoup
  cat $case.normsodn_1 > $case.normsodn
  set i = 2
  while ($i <= $maxproc)
    cat $case.normsoup_$i >> $case.normsoup
    cat $case.normsodn_$i >> $case.normsodn
    @ i ++
  end
endif

echo "<-  "done at `date` >>$log
echo "-----------------------------------------------------------------">>$log
rm $def.error
#rm .in.tmp .in.tmp1
touch $def.error
rm $tmp* >&/dev/null
rm .lapwsopara.* >&/dev/null
echo "DONE" >.lapwsopara
exit 0

single:
echo "running in single mode"
$exe $def.def
rm $tmp* >&/dev/null
rm .lapwsopara.* >&/dev/null
exit 0


error:
echo "** " LAPWSO crashed!
echo "** " LAPWSO crashed at `date`>>$log
echo "** " check ERROR FILES! >>$log
echo "-----------------------------------------------------------------">>$log
echo "** " Error in Parallel LAPWSO >>$def.error
rm $tmp* >&/dev/null
rm .lapwsopara.* >&/dev/null
echo "ERROR" >.lapwsopara
exit 1

