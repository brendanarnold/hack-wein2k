###############################################################################
#                                                                             #
#                          Generic Makefile for lapw1                         #
#                                                                             #
#  make           ... generate executable for the REAL sequential version     #
#  make real      ... generate executable for the REAL sequential version     #
#  make complex   ... generate executable for the COMPLEX sequential version  #
#  make rp        ... generate executable for the REAL parallel version       #
#  make cp        ... generate executable for the COMPLEX parallel version    #
#  make all       ... generate real, complex, rp, cp                          #
#  make last      ... repeat latest make (real, complex, rp, or cp)           #
#  make clean     ... delete unnecessary files                                #
#                                                                             #
#  CAUTION: This makefile must not be called via the '-f' parameter of 'make'.#
#           (Don't use 'make -f Makefile.aix32' !!)                           #
#           (Always (symbolic) link the appropriate Makefile to 'Makefile'!!) #
#                                                                             #
###############################################################################
#
# FC ........... compiler name
# MPF ......... compiler name for parallel compilation
# FOPT ......... optimization flags
# FPOPT ........ optimization flags for parallel compilation
# FGEN ......... code generation flags (flags not related to optimization)
# LDFLAGS ...... linker flags
# R_LIBS ....... libraries needed to build the REAL executable
# C_LIBS ....... libraries needed to build the COMPLEX executable
# RP_LIBS ...... libraries needed to build the REAL parallel executable
# CP_LIBS ...... libraries needed to build the COMPLEX parallel executable
# DESTDIR ...... dir. where the executable should go (without trailing '/'!)
# R_EXECNAME ... name of the resulting REAL executable (without prefixed path!)
# C_EXECNAME ... name of the resulting COMPLEX executable ( -"- )
# RP_EXECNAME ... name of the resulting REAL parallel executable ( -"- )
# CP_EXECNAME ... name of the resulting COMPLEX parallel executable ( -"- )
#
.SUFFIXES:      .F
.SUFFIXES:      .F90
SHELL = /bin/sh
FC = _FC_
MPF = _MPF_
CC = _CC_
FOPT =  _FOPT_
FPOPT = _FPOPT_
DParallel = _DPARALLEL_
FGEN = $(PARALLEL)
LDFLAGS = _LDFLAGS_
R_LIBS = _R_LIBS_
C_LIBS = $(R_LIBS)
RP_LIBS = $(R_LIBS) _RP_LIBS_
CP_LIBS = $(RP_LIBS)
DESTDIR = .

R_EXECNAME = lapw1
C_EXECNAME = lapw1c
RP_EXECNAME = lapw1_mpi
CP_EXECNAME = lapw1c_mpi
###############################################################################

R_EXEC = $(DESTDIR)/$(R_EXECNAME)
C_EXEC = $(DESTDIR)/$(C_EXECNAME)
RP_EXEC = $(DESTDIR)/$(RP_EXECNAME)
CP_EXEC = $(DESTDIR)/$(CP_EXECNAME)

#..............................................................................
#
#  All object files,
#    including files in $(RC_OBJS), $(SP_OBJS), $(OBJSMOD)
#
OBJS =	\
	abc.o atpar.o bandv1.o calkpt.o cbcomb.o coors.o cputim.o \
	dblr2k.o dgeqrl.o dgewy.o dgewyg.o dlbrfg.o dsbein1.o \
	dscgst.o dstebz2.o dsyevx2.o dsymm2.o dsyr2m.o dsyrb4.o \
	dsyrb5l.o dsyrdt4.o dsytrd2.o dsywyv.o dsyxev4.o dvbes1.o \
	eisps.o errclr.o errflg.o forfhs.o gaunt1.o gaunt2.o \
	gbass.o gtfnam.o hamilt.o hns.o horb.o inikpt.o \
	inilpw.o lapw1.o latgen.o lmsort.o locdef.o lohns.o \
	lopw.o matmm.o modules.o nn.o outerr.o outwin.o \
	pdsyevx16.o prtkpt.o prtres.o pzheevx16.o rdswar.o \
	rint13.o rotate.o rotdef.o seclit.o seclr4.o seclr5.o \
	select.o service.o setkpt.o setwar.o sphbes.o stern.o \
	tapewf.o ustphx.o vectf.o warpin.o wfpnt.o wfpnt1.o \
	ylm.o zhcgst.o zheevx2.o zhemm2.o zher2m.o zhetrd2.o \
	pdsyr2m.o pzher2m.o
#
# Object files with !_REAL and !_COMPLEX
#
RC_OBJS = calkpt.o hamilt.o hns.o horb.o modules.o seclit.o seclr4.o seclr5.o \
        tapewf.o ustphx.o wfpnt.o wfpnt1.o
#
# Object files for parallel and sequential
#
SP_OBJS = calkpt.o gtfnam.o hamilt.o hldau.o hns.o modules.o pdsyevx16.o \
        prtkpt.o pzheevx16.o seclit.o seclr4.o seclr5.o \
	inikpt.o inilpw.o lapw1.o pdsyr2m.o pzher2m.o setkpt.o
#
# Object files using modules
#
OBJSMOD = abc.o    atpar.o  calkpt.o hamilt.o hns.o hldau.o inilpw.o outwin.o \
	prtkpt.o seclr4.o seclr5.o gtfnam.o lapw1.o seclit.o \
        cbcomb.o coors.o forfhs.o gaunt1.o gaunt2.o horb.o inikpt.o latgen.o \
	lohns.o lopw.o nn.o prtres.o rdswar.o rint13.o rotdef.o \
	setkpt.o setwar.o tapewf.o ustphx.o wfpnt.o wfpnt1.o
#
#..............................................................................
#
#  Object files for REAL and COMPLEX versions
#
R_OBJS = $(OBJS)
C_OBJS = $(OBJS)

#..............................................................................
#
#  Build executable (either REAL or COMPLEX versions)
#

default: real

all:    
	make real complex rp cp

last:
	if [ ! -f .real -a ! -f .complex  -o ! -f .sequential -a ! -f .parallel ]; then make real; fi
	if [ -f .real -a -f .sequential ]; then make real; fi
	if [ -f .complex -a -f .sequential ]; then make complex; fi
	if [ -f .real -a -f .parallel ]; then make rp; fi
	if [ -f .complex -a -f .parallel ]; then make cp; fi
        

real: keep_rs_files
	$(MAKE) TYPE='REAL' TYPE_COMMENT='\!_REAL' \
	  $(R_EXEC) FORT=$(FC) FFLAGS='$(FGEN) $(FOPT)'
	rm param.inc

complex: keep_cs_files
	$(MAKE) TYPE='COMPLEX' TYPE_COMMENT='\!_COMPLEX' \
	  $(C_EXEC) FORT=$(FC) FFLAGS='$(FGEN) $(FOPT)'
	rm param.inc

rp: keep_rp_files
	$(MAKE) PARALLEL=$(DParallel) TYPE='REAL' TYPE_COMMENT='\!_REAL' \
	  $(RP_EXEC) FORT=$(MPF) FFLAGS='$(FGEN) $(FPOPT) $(DParallel)'
	rm param.inc

cp: keep_cp_files
	$(MAKE) PARALLEL=$(DParallel) TYPE='COMPLEX' TYPE_COMMENT='\!_COMPLEX' \
	  $(CP_EXEC) FORT=$(MPF) FFLAGS='$(FGEN) $(FPOPT) $(DParallel)'
	rm param.inc

#..............................................................................

$(R_EXEC): $(R_OBJS)
	$(FORT) $(LFLAGS) -o $(R_EXEC) $(R_OBJS) $(LDFLAGS) $(R_LIBS) $(LFLAGS)

$(C_EXEC): $(C_OBJS)
	$(FORT) $(LFLAGS) -o $(C_EXEC) $(C_OBJS) $(LDFLAGS) $(C_LIBS) $(LFLAGS)

$(RP_EXEC): $(R_OBJS)
	$(FORT) $(LFLAGS) -o $(RP_EXEC) $(R_OBJS) $(LDFLAGS) $(RP_LIBS) $(LFLAGS)

$(CP_EXEC): $(C_OBJS)
	$(FORT) $(LFLAGS) -o $(CP_EXEC) $(C_OBJS) $(LDFLAGS) $(CP_LIBS) $(LFLAGS)

# real and sequential
keep_rs_files:
	if [ -f .complex ]; then \
	   rm -f .complex $(RC_OBJS) param.inc *.mod; \
	fi
	touch .real
	cp -p param.inc_r param.inc
	if [ -f .parallel ]; then \
	   rm -f .parallel $(SP_OBJS) *.mod; \
	fi
	touch .sequential

# complex and sequential
keep_cs_files:
	if [ -f .real ]; then \
	   rm -f .real $(RC_OBJS) param.inc *.mod; \
	fi
	touch .complex
	cp -p param.inc_c param.inc
	if [ -f .parallel ]; then \
	   rm -f .parallel $(SP_OBJS) *.mod; \
	fi
	touch .sequential

# real and parallel
keep_rp_files:
	if [ -f .complex ]; then \
	   rm -f .complex $(RC_OBJS) param.inc *.mod; \
	fi
	touch .real
	cp -p param.inc_r param.inc
	if [ -f .sequential ]; then \
	   rm -f .sequential $(SP_OBJS) *.mod; \
	fi
	touch .parallel

# complex and parallel
keep_cp_files:
	if [ -f .real ]; then \
	   rm -f .real $(RC_OBJS) param.inc; \
	fi
	touch .complex
	cp -p param.inc_c param.inc
	if [ -f .sequential ]; then \
	   rm -f .sequential $(SP_OBJS) *.mod; \
	fi
	touch .parallel

#..............................................................................
#
#  All routines depend upon an include file (contains common PARAMETERS)
#
$(R_OBJS):		param.inc_r Makefile
$(C_OBJS):		param.inc_c Makefile
$(OBJSMOD):		modules.o

#..............................................................................
#
#  remove unnecessary files (executable(s) are not removed)
#
clean:
	rm -f *.o *_tmp_.* *.P .real .complex .sequential .parallel *.mod
#..............................................................................
#
#  define inference rules to generate object files from source files
#  (From .F files the appropriatly typed subroutine (REAL/COMPLEX) has to
#  be chosen.)
#
.f.o:
	$(FORT) $(FFLAGS) -c $<
#.F.o:
#	$(FORT) $(FFLAGS) -D$(TYPE_COMMENT)= -c $<
.F.o:
	@sed -e 's/^$(TYPE_COMMENT)//'   $< >$*_tmp_.F
	@echo "$<: $(TYPE) version extracted"
	$(FORT) $(FFLAGS) -c $*_tmp_.F
	mv $*_tmp_.o $*.o
	rm $*_tmp_.F
.c.o:
	$(CC) -c $<
.f90.o:
	$(FORT) $(FFLAGS) -c $<
.F90.o:
	@sed -e 's/^$(TYPE_COMMENT)//'   $< >$*_tmp_.F90
	@echo "$<: $(TYPE) version extracted"
	$(FORT) $(FFLAGS) -c $*_tmp_.F90
	mv $*_tmp_.o $*.o
	rm $*_tmp_.F90
