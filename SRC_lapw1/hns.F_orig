      SUBROUTINE  HNS(NV,NAT,NNSL,POS,VI,R,MULT, &
                      LQIND,LQNS,GFAC,ROTLOC,ROTIJ,VNS1,VNS2, &
                      VNS3)
!
#ifdef Parallel
      use matrices, only : H, HSROWS, HPANEL, SPANEL, PAR_SYR2K, KZZ, XK, YK, ZK
#else 
      use matrices, only : HS, HSDIAG, HSROWS, HPANEL, SPANEL, KZZ, XK, YK, ZK
#endif
      use parallel, only : ICTXT, DESCHS, DESCZ, NPE, MYID, &
                           NPROW, NPCOL, MYROWHS, MYCOLHS, &
                           BLOCKSIZE, LDHS, LCOLHS, LCOLZ, &
                           BARRIER, &
                           MYCOLPANEL

      use albl, only : AL, BL
      use loabc, only : ALO, BLO, CLO, ELO, PLO, DPLO, PELO, &
                        DPELO, PEILO, PI12LO, PE12LO
      use lolog, only : nlo, loor, lapw, ilo
      use loint, only : VNS1LO, VNS2LO, VNS3LO
      use struk, only : NDF
      IMPLICIT NONE
      INCLUDE 'param.inc'
!
!        Arguments
!
      INTEGER            NNSL, NV, NAT
      INTEGER            MULT(NAT), LQIND(NAT)
      INTEGER            LQNS(6,NGAU,NAT)
      INTEGER            jlo
      DOUBLE PRECISION   VI
      DOUBLE PRECISION   R(NAT)
      DOUBLE PRECISION   ROTLOC(3,3,NAT), ROTIJ(3,3,NDF)
      DOUBLE PRECISION   POS(3,NDF)
!                , XK(HSROWS+1), YK(HSROWS+1), ZK(HSROWS+1)
      DOUBLE PRECISION   VNS1(0:NSLMAX-1,LMMX,0:NSLMAX-1,NAT)
      DOUBLE PRECISION   VNS2(0:NSLMAX-1,LMMX,0:NSLMAX-1,NAT)
      DOUBLE PRECISION   VNS3(0:NSLMAX-1,LMMX,0:NSLMAX-1,NAT)
      DOUBLE COMPLEX         GFAC(NGAU,NAT)
!
!
!        YL(lm,:,i) - temporary storage of spherical harmonics for
!                     local orbitals
!
      DOUBLE COMPLEX, allocatable :: YL(:,:)
!
      DOUBLE PRECISION, ALLOCATABLE :: A1R(:,:), A1I(:,:)
      DOUBLE PRECISION, ALLOCATABLE :: A2R(:,:), A2I(:,:)
      DOUBLE PRECISION, ALLOCATABLE :: B1R(:,:), B1I(:,:)
      DOUBLE PRECISION, ALLOCATABLE :: B2R(:,:), B2I(:,:)
      DOUBLE PRECISION, ALLOCATABLE :: C1R(:,:), C1I(:,:)
      DOUBLE PRECISION, ALLOCATABLE :: C2R(:,:), C2I(:,:)
      DOUBLE PRECISION   TMP(HSROWS)
!_COMPLEX      DOUBLE COMPLEX, ALLOCATABLE :: A1(:,:), A2(:,:)
!_COMPLEX      DOUBLE COMPLEX, ALLOCATABLE :: B1(:,:), B2(:,:)
!_COMPLEX      DOUBLE COMPLEX A1x,A2x,B1x,B2x,C1x,C2x
!_COMPLEX      DOUBLE PRECISION   HTMPR(HSROWS), HTMPI(HSROWS)
      DOUBLE PRECISION, ALLOCATABLE :: ALMR(:,:), ALMI(:,:)
      DOUBLE PRECISION, ALLOCATABLE :: BLMR(:,:), BLMI(:,:)
      DOUBLE PRECISION, ALLOCATABLE :: CLMR(:,:), CLMI(:,:)
!
!        Local Parameters
!
      DOUBLE COMPLEX         CIMAG
      PARAMETER          (CIMAG  = (0.0D0,1.0D0))
      DOUBLE PRECISION   ONE, ZERO, HALF, TWO, FOUR
      PARAMETER          (ONE=1.0D0, ZERO=0.0D0, HALF=0.5D0, TWO=2.0D0, FOUR=4.0D0)
      DOUBLE COMPLEX     CONE, CZERO, CHALF
      PARAMETER          (CONE=(1.0D0,0.0D0), CZERO=(0.0D0,0.0D0))
      PARAMETER          (CHALF=(0.5D0,0.0D0))
!
!        Locals
!
      INTEGER            I, I1, I2, J, JNEQ, JEQ, INDATM
      INTEGER            L, LINDEX
      INTEGER            L0M0, LPMP, L0, LP, M0, MP, LMX
      INTEGER            L0IDX, LMXIDX, LPIDX, M0IDX, MPIDX
      INTEGER            LMXPTR(NGAU+2), LPPTR(NGAU+2)
      INTEGER            L0PTR(NGAU+2), M0PTR(NGAU+2), MPPTR(NGAU+2)
      INTEGER            L0FLD(NGAU), LMXFLD(NGAU), LPFLD(NGAU)
      INTEGER            M0FLD(NGAU), MPFLD(NGAU)
      INTEGER            IOUTER,IMIN,IMAX,IHELP,II
      INTEGER            JOUTER,JMIN,JMAX,JHELP,JJ
      INTEGER            NSL2
      PARAMETER          (NSL2=NSLMAX*NSLMAX)
      DOUBLE PRECISION   ARGX, ARGY, ARGZ, RHOATM, PI
      DOUBLE PRECISION   VEC(3), ROTV1(3), ROTV2(3)
      DOUBLE PRECISION   TUUR, TUUI, TUDR, TUDI
      DOUBLE PRECISION   TDUR, TDUI, TDDR, TDDI
!
!        integrals for local orbitals
!
      DOUBLE PRECISION   TUUR21, TUUI21, TUDR21, TUDI21, TUUR12, TUUI12
      DOUBLE PRECISION   TDUR12, TDUI12, TUUR22, TUUI22
!
      DOUBLE COMPLEX         CIL
      DOUBLE COMPLEX         PHS(HSROWS), GNTFLD(NGAU)
      LOGICAL            LOORL0
!
!        External Subroutines
!
      EXTERNAL           LMSORT, LOHNS, ROTATE, YLM
!
!        Intrinsic Functions
!
      INTRINSIC          DCONJG, EXP, SQRT, ATAN, DBLE, DIMAG
!
      CALL BARRIER
      allocate( A1R(HSROWS, NSL2), A1I(HSROWS, NSL2) )
      allocate( A2R(HSROWS, NSL2), A2I(HSROWS, NSL2) )
      allocate( B1R(HSROWS, NSL2), B1I(HSROWS, NSL2) )
      allocate( B2R(HSROWS, NSL2), B2I(HSROWS, NSL2) )
      allocate( C1R(HSROWS, NSL2), C1I(HSROWS, NSL2) )
      allocate( C2R(HSROWS, NSL2), C2I(HSROWS, NSL2) )
!_COMPLEX      allocate( A1(HSROWS, NSL2) )
!_COMPLEX      allocate( A2(HSROWS, NSL2) )
!_COMPLEX      allocate( B1(HSROWS, NSL2) )
!_COMPLEX      allocate( B2(HSROWS, NSL2) )
      allocate( ALMR(HSROWS, 0:NSL2-1) )
      allocate( ALMI(HSROWS, 0:NSL2-1) )
      allocate( BLMR(HSROWS, 0:NSL2-1) )
      allocate( BLMI(HSROWS, 0:NSL2-1) )
      allocate( CLMR(HSROWS, 0:NSL2-1) )
      allocate( CLMI(HSROWS, 0:NSL2-1) )

      allocate( YL(0:NSL2-1,HSROWS) )

      PI = FOUR*ATAN(ONE)
      INDATM = 0
      DO 110 JNEQ = 1, NAT
         CALL LMSORT(NAT,NGAU,JNEQ,LQIND,LQNS,GFAC,L0PTR, &
                     L0FLD,M0PTR,M0FLD,LPPTR,LPFLD,MPPTR,MPFLD, &
                     LMXPTR,LMXFLD,GNTFLD)
         RHOATM = FOUR*PI*SQRT(VI)*R(JNEQ)*R(JNEQ)
         DO 120 JEQ = 1, MULT(JNEQ)
            INDATM = INDATM + 1
            DO 170 I = 1, NV+NLO
!
!        calculate phase-factor for Alm, Blm
!
               ARGX = POS(1,INDATM)*KZZ(1,I)
               ARGY = POS(2,INDATM)*KZZ(2,I)
               ARGZ = POS(3,INDATM)*KZZ(3,I)
               PHS(I) = EXP(CIMAG*TWO*PI*(ARGX+ARGY+ARGZ))
!
!        calculate spherical-harmonics for Alm, Blm
!
               VEC(1) = XK(I)
               VEC(2) = YK(I)
               VEC(3) = ZK(I)
               CALL ROTATE (VEC,ROTIJ(1,1,INDATM),ROTV1)
               CALL ROTATE (ROTV1,ROTLOC(1,1,JNEQ),ROTV2)
               CALL YLM (ROTV2,NNSL-1,YL(0,I))
  170       CONTINUE
!
!        precompute CONJG(Alm), CONJG(Blm)
!
            CIL = CONE
            L0M0 = 0
            DO 140 L0 = 0, NNSL - 1
               DO 150 M0 = -L0, L0
                  DO 160 I = 1, NV
                     ALMR(I,L0M0) = RHOATM*DBLE(CIL*PHS(I)* &
                                    DCONJG(YL(L0M0,I)))
                     ALMI(I,L0M0) = RHOATM*DIMAG(CIL*PHS(I)* &
                                    DCONJG(YL(L0M0,I)))
                     BLMR(I,L0M0) = BL(I,L0,JNEQ)*ALMR(I,L0M0)
                     BLMI(I,L0M0) = BL(I,L0,JNEQ)*ALMI(I,L0M0)
                     ALMR(I,L0M0) = AL(I,L0,JNEQ)*ALMR(I,L0M0)
                     ALMI(I,L0M0) = AL(I,L0,JNEQ)*ALMI(I,L0M0)
                     CLMR(I,L0M0) = ZERO
                     CLMI(I,L0M0) = ZERO
  160             CONTINUE
                  DO 165 I = NV+1,NV+NLO
                     ALMR(I,L0M0) = ZERO
                     ALMI(I,L0M0) = ZERO
                     BLMR(I,L0M0) = ZERO
                     BLMI(I,L0M0) = ZERO
                     CLMR(I,L0M0) = ZERO
                     CLMI(I,L0M0) = ZERO
  165             CONTINUE  
                  IF (L0 .LE. LOMAX) THEN
!                     IF (LOOR(L0,JNEQ)) THEN
                      do jlo=1,ilo(l0,jneq)
                       CALL LOHNS (JNEQ,MULT,I1,I2,L0,jlo)   
                        DO 166 I = NV+I1,NV+I2
                           ALMR(I,L0M0) = RHOATM*DBLE(CIL*PHS(I)* &
                                          DCONJG(YL(L0M0,I)))
                           ALMI(I,L0M0) = RHOATM*DIMAG(CIL*PHS(I)* &
                                          DCONJG(YL(L0M0,I)))
                           BLMR(I,L0M0) = BLO(L0,jlo,JNEQ)*ALMR(I,L0M0)
                           BLMI(I,L0M0) = BLO(L0,jlo,JNEQ)*ALMI(I,L0M0)
                           CLMR(I,L0M0) = CLO(L0,jlo,JNEQ)*ALMR(I,L0M0)
                           CLMI(I,L0M0) = CLO(L0,jlo,JNEQ)*ALMI(I,L0M0)
                           ALMR(I,L0M0) = ALO(L0,jlo,JNEQ)*ALMR(I,L0M0)
                           ALMI(I,L0M0) = ALO(L0,jlo,JNEQ)*ALMI(I,L0M0)
  166                   CONTINUE  
                     ENDdo
                  ENDIF
                  L0M0 = L0M0 + 1
  150          CONTINUE
               CIL = CIL*CIMAG
  140       CONTINUE
!
!        determine nonspherical contribution to Hamilton-matrix elements
!
!	************* initialize Loop-Index
            LINDEX=0
            DO 90 L0IDX = L0PTR(1), L0PTR(2) - 1
               L0 = L0FLD(L0IDX)    
               DO 100 M0IDX = M0PTR(L0IDX), M0PTR(L0IDX+1) - 1
!       ************ increment Loop-Index 
	          LINDEX=LINDEX+1
                  M0 = M0FLD(M0IDX)
                  L0M0 = L0*(L0 + 1) + M0
                  DO 80 J = 1, NV+NLO
                     A1R(J,LINDEX) = ALMR(J,L0M0)
                     A1I(J,LINDEX) = ALMI(J,L0M0)
                     B1R(J,LINDEX) = BLMR(J,L0M0)
                     B1I(J,LINDEX) = BLMI(J,L0M0)
                     C1R(J,LINDEX) = CLMR(J,L0M0) 
                     C1I(J,LINDEX) = CLMI(J,L0M0) 
                     A2R(J,LINDEX) = ZERO
                     A2I(J,LINDEX) = ZERO
                     B2R(J,LINDEX) = ZERO
                     B2I(J,LINDEX) = ZERO
                     C2R(J,LINDEX) = ZERO
                     C2I(J,LINDEX) = ZERO
   80             CONTINUE
                  DO 40 LPIDX = LPPTR(M0IDX), LPPTR(M0IDX+1) - 1
                     LP = LPFLD(LPIDX)
                     DO 50 MPIDX = MPPTR(LPIDX), MPPTR(LPIDX+1) - 1
                        MP = MPFLD(MPIDX)
                        LPMP = LP*(LP + 1) + MP
                        TUUR = ZERO
                        TUUI = ZERO
                        TDUR = ZERO
                        TDUI = ZERO
                        TUDR = ZERO
                        TUDI = ZERO
                        TDDR = ZERO
                        TDDI = ZERO
!
                        TUUR21 = ZERO
                        TUUI21 = ZERO
                        TUDR21 = ZERO
                        TUDI21 = ZERO
                        TUUR12 = ZERO
                        TUUI12 = ZERO
                        TDUR12 = ZERO
                        TDUI12 = ZERO
                        TUUR22 = ZERO
                        TUUI22 = ZERO
!
                        DO 10 LMXIDX = LMXPTR(MPIDX), LMXPTR(MPIDX+1)-1
                           LMX = LMXFLD(LMXIDX)
                           TUUR = TUUR + DBLE(GNTFLD(LMXIDX))* &
                                  VNS1(LP,LMX,L0,JNEQ)
                           TUUI = TUUI + DIMAG(GNTFLD(LMXIDX))* &
                                  VNS1(LP,LMX,L0,JNEQ)
!
                           TDUR = TDUR + DBLE(GNTFLD(LMXIDX))* &
                                  VNS3(L0,LMX,LP,JNEQ)
                           TDUI = TDUI + DIMAG(GNTFLD(LMXIDX))* &
                                  VNS3(L0,LMX,LP,JNEQ)
!
                           TUDR = TUDR + DBLE(GNTFLD(LMXIDX))* &
                                  VNS3(LP,LMX,L0,JNEQ)
                           TUDI = TUDI + DIMAG(GNTFLD(LMXIDX))* &
                                  VNS3(LP,LMX,L0,JNEQ)
!
                           TDDR = TDDR + DBLE(GNTFLD(LMXIDX))* &
                                  VNS2(LP,LMX,L0,JNEQ)
                           TDDI = TDDI + DIMAG(GNTFLD(LMXIDX))* &
                                  VNS2(LP,LMX,L0,JNEQ)
! 
!        part for local orbitals
!
                           LOORL0 = .FALSE.
                           IF (L0 .LE. LOMAX) THEN
                              LOORL0 = LOOR(L0,JNEQ)
                              IF (LOORL0) THEN
                                 TUUR12 = TUUR12+DBLE(GNTFLD(LMXIDX))* &
                                          VNS1LO(L0+1,LMX,LP+1,JNEQ)
                                 TUUI12 = TUUI12+DIMAG(GNTFLD(LMXIDX))* &
                                          VNS1LO(L0+1,LMX,LP+1,JNEQ)
!
                                 TDUR12 = TDUR12+DBLE(GNTFLD(LMXIDX))* &
                                          VNS2LO(L0+1,LMX,LP+1,JNEQ)
                                 TDUI12 = TDUI12+DIMAG(GNTFLD(LMXIDX))* &
                                          VNS2LO(L0+1,LMX,LP+1,JNEQ)
                              ENDIF
                           ENDIF
                           IF (LP .LE. LOMAX) THEN
                              IF (LOOR(LP,JNEQ)) THEN
                                 IF (LOORL0) THEN
                                    TUUR22 = TUUR22 + &
                                             DBLE(GNTFLD(LMXIDX))* &
                                             VNS3LO(LP+1,LMX,L0+1,JNEQ)
                                    TUUI22 = TUUI22 + &
                                             DIMAG(GNTFLD(LMXIDX))* &
                                             VNS3LO(LP+1,LMX,L0+1,JNEQ)
                                 ENDIF
                                 TUUR21 = TUUR21 + DBLE(GNTFLD(LMXIDX))* &
                                          VNS1LO(LP+1,LMX,L0+1,JNEQ)
                                 TUUI21 = TUUI21+DIMAG(GNTFLD(LMXIDX))* &
                                          VNS1LO(LP+1,LMX,L0+1,JNEQ)
!
                                 TUDR21 = TUDR21 + DBLE(GNTFLD(LMXIDX))* &
                                          VNS2LO(LP+1,LMX,L0+1,JNEQ)
                                 TUDI21 = TUDI21+DIMAG(GNTFLD(LMXIDX))* &
                                          VNS2LO(LP+1,LMX,L0+1,JNEQ)
                              ENDIF
                           ENDIF
!
!        end of local orbital part
!
   10                   CONTINUE
                        DO 30 I = 1, NV+NLO
                           TMP(I) = TUUR*ALMR(I,LPMP)
                           TMP(I) = TMP(I) + TUUI*ALMI(I,LPMP)
                           TMP(I) = TMP(I) + TDUR*BLMR(I,LPMP)
                           TMP(I) = TMP(I) + TDUI*BLMI(I,LPMP) 
                           TMP(I) = TMP(I) + TUUR21*CLMR(I,LPMP)
                           TMP(I) = TMP(I) + TUUI21*CLMI(I,LPMP) 
                           A2R(I,LINDEX)  = A2R(I,LINDEX) + TMP(I)
!
                           TMP(I) = TUUI*ALMR(I,LPMP)
                           TMP(I) = TMP(I) - TUUR*ALMI(I,LPMP)
                           TMP(I) = TMP(I) - TDUR*BLMI(I,LPMP)
                           TMP(I) = TMP(I) + TDUI*BLMR(I,LPMP)
                           TMP(I) = TMP(I) - TUUR21*CLMI(I,LPMP)
                           TMP(I) = TMP(I) + TUUI21*CLMR(I,LPMP)
                           A2I(I,LINDEX)  = A2I(I,LINDEX) + TMP(I)
!
                           TMP(I) = TUDR*ALMR(I,LPMP)
                           TMP(I) = TMP(I) + TUDI*ALMI(I,LPMP)
                           TMP(I) = TMP(I) + TDDR*BLMR(I,LPMP)
                           TMP(I) = TMP(I) + TDDI*BLMI(I,LPMP)
                           TMP(I) = TMP(I) + TUDR21*CLMR(I,LPMP)
                           TMP(I) = TMP(I) + TUDI21*CLMI(I,LPMP) 
                           B2R(I,LINDEX) = B2R(I,LINDEX) + TMP(I)
!
                           TMP(I) = TUDI*ALMR(I,LPMP)
                           TMP(I) = TMP(I) - TUDR*ALMI(I,LPMP)
                           TMP(I) = TMP(I) - TDDR*BLMI(I,LPMP)
                           TMP(I) = TMP(I) + TDDI*BLMR(I,LPMP)
                           TMP(I) = TMP(I) - TUDR21*CLMI(I,LPMP)
                           TMP(I) = TMP(I) + TUDI21*CLMR(I,LPMP) 
                           B2I(I,LINDEX) = B2I(I,LINDEX) + TMP(I)
!
                           TMP(I) = TUUR12*ALMR(I,LPMP)
                           TMP(I) = TMP(I) + TUUI12*ALMI(I,LPMP)
                           TMP(I) = TMP(I) + TDUR12*BLMR(I,LPMP)
                           TMP(I) = TMP(I) + TDUI12*BLMI(I,LPMP)
                           TMP(I) = TMP(I) + TUUR22*CLMR(I,LPMP)
                           TMP(I) = TMP(I) + TUUI22*CLMI(I,LPMP) 
                           C2R(I,LINDEX) = C2R(I,LINDEX) + TMP(I)
!
                           TMP(I) = TUUI12*ALMR(I,LPMP)
                           TMP(I) = TMP(I) - TUUR12*ALMI(I,LPMP)
                           TMP(I) = TMP(I) - TDUR12*BLMI(I,LPMP)
                           TMP(I) = TMP(I) + TDUI12*BLMR(I,LPMP)
                           TMP(I) = TMP(I) - TUUR22*CLMI(I,LPMP)
                           TMP(I) = TMP(I) + TUUI22*CLMR(I,LPMP) 
                           C2I(I,LINDEX) = C2I(I,LINDEX) + TMP(I)
   30                   CONTINUE
   50                CONTINUE
   40             CONTINUE
!            *** speed improvement	
  100          CONTINUE
   90       CONTINUE
#ifdef Parallel
                     CALL PAR_SYR2K(NV+NLO,A1R,A1I,A2R,A2I,LINDEX,H)
                     CALL PAR_SYR2K(NV+NLO,B1R,B1I,B2R,B2I,LINDEX,H)
!                   if(.true.) then
!                         deutlicher Overhead !
                     CALL PAR_SYR2K(NV+NLO,C1R,C1I,C2R,C2I,LINDEX,H)
!                   else 
!                     CALL COPYTOABCLM(LINDEX,NV+NLO,C1R,ABCLM1)
!                     CALL COPYTOABCLM(LINDEX,NV+NLO,C2R,ABCLM2)
!                     CALL PDGEMM('N','T',NV,NLO,LINDEX,
!     $                    ONE, ABCLM1,1,1,DESCHS, 
!     $                         ABCLM2,NV+1,1,DESCHS,
!     $                    ONE, H,1,NV+1, DESCHS)
!                     CALL PDSYR2K('U','N',NLO,LINDEX,
!     $                    HALF, ABCLM1,NV+1,1,DESCHS, 
!     $                          ABCLM2,NV+1,1,DESCHS,
!     $                    ONE,  H,NV+1,NV+1, DESCHS)
!                     CALL COPYTOABCLM(LINDEX,NV+NLO,C1I,ABCLM1)
!                     CALL COPYTOABCLM(LINDEX,NV+NLO,C2I,ABCLM2)
!                     CALL PDGEMM('N','T',NV,NLO,LINDEX,
!     $                    -ONE, ABCLM1,1,1,DESCHS, 
!     $                         ABCLM2,NV+1,1,DESCHS,
!     $                    ONE, H,1,NV+1, DESCHS)
!                     CALL PDSYR2K('U','N',NLO,LINDEX,
!     $                    -HALF, ABCLM1,NV+1,1,DESCHS, 
!     $                           ABCLM2,NV+1,1,DESCHS,
!     $                    ONE,   H,NV+1,NV+1, DESCHS)
!                   end if
#else
!_REAL                     CALL DSYR2M('L','N','T',NV,LINDEX, &
!_REAL                                 ONE, A2R, HSROWS, A1R, HSROWS, &
!_REAL                                 ONE, HS, HSROWS)
!_REAL                     CALL DSYR2M('L','N','T',NV,LINDEX, &
!_REAL                                 -ONE, A2I, HSROWS, A1I, HSROWS, &
!_REAL                                 ONE, HS, HSROWS)
!_REAL                     CALL DSYR2M('L','N','T',NV,LINDEX, &
!_REAL                                 ONE, B2R, HSROWS, B1R, HSROWS, &
!_REAL                                 ONE, HS, HSROWS)
!_REAL                     CALL DSYR2M('L','N','T',NV,LINDEX, &
!_REAL                                 -ONE, B2I, HSROWS, B1I, HSROWS, &
!_REAL                                 ONE, HS, HSROWS)
!_COMPLEX                  DO I = 1, NV
!_COMPLEX	              DO L=1,LINDEX
!_COMPLEX                        A1(I,L)=A1R(I,L)+CIMAG*(A1I(I,L))
!_COMPLEX                        A2(I,L)=A2R(I,L)+CIMAG*(A2I(I,L))
!_COMPLEX                        B1(I,L)=B1R(I,L)+CIMAG*(B1I(I,L))
!_COMPLEX                        B2(I,L)=B2R(I,L)+CIMAG*(B2I(I,L))
!_COMPLEX                     END DO
!_COMPLEX                  END DO
!_COMPLEX!            Note: not 'C', but 'T' for second matrix!!!
!_COMPLEX                  CALL ZHER2M('L','N','T',NV,LINDEX, &
!_COMPLEX                              CONE,A2,HSROWS,A1,HSROWS, &
!_COMPLEX                              CONE, HS, HSROWS)
!_COMPLEX                  CALL ZHER2M('L','N','T',NV,LINDEX, &
!_COMPLEX                              CONE,B2,HSROWS,B1,HSROWS, &
!_COMPLEX                              CONE, HS, HSROWS)
!_REAL     CALL DGEMM('N','T',NLO,NV,LINDEX, &
!_REAL                   ONE,A2R(NV+1,1),HSROWS,A1R,HSROWS, &
!_REAL                   ONE,HS(NV+1,1),HSROWS)
!_REAL     CALL DGEMM('N','T',NLO,NV,LINDEX, &
!_REAL                   -ONE,A2I(NV+1,1),HSROWS,A1I,HSROWS, &
!_REAL                   ONE,HS(NV+1,1),HSROWS)
!_REAL     CALL DGEMM('N','T',NLO,NV,LINDEX, &
!_REAL                   ONE,B2R(NV+1,1),HSROWS,B1R,HSROWS, &
!_REAL                   ONE,HS(NV+1,1),HSROWS)
!_REAL     CALL DGEMM('N','T',NLO,NV,LINDEX, &
!_REAL                   -ONE,B2I(NV+1,1),HSROWS,B1I,HSROWS, &
!_REAL                   ONE,HS(NV+1,1),HSROWS)
!_REAL     CALL DGEMM('N','T',NLO,NV,LINDEX, &
!_REAL                   ONE,C2R(NV+1,1),HSROWS,C1R,HSROWS, &
!_REAL                   ONE,HS(NV+1,1),HSROWS)
!_REAL     CALL DGEMM('N','T',NLO,NV,LINDEX, &
!_REAL                   -ONE,C2I(NV+1,1),HSROWS,C1I,HSROWS, &
!_REAL                   ONE,HS(NV+1,1),HSROWS)
!_COMPLEX                  DO I = nv+1, NV+nlo
!_COMPLEX                     DO L=1,LINDEX
!_COMPLEX                        A2(I,L)=A2R(I,L)+CIMAG*(A2I(I,L))
!_COMPLEX                        B2(I,L)=B2R(I,L)+CIMAG*(B2I(I,L))
!_COMPLEX                     END DO
!_COMPLEX                  END DO
!_COMPLEX          CALL ZGEMM('N','T',NLO,NV,LINDEX, &
!_COMPLEX                   CONE,A2(NV+1,1),HSROWS,A1,HSROWS, &
!_COMPLEX                   CONE,HS(NV+1,1),HSROWS)
!_COMPLEX          CALL ZGEMM('N','T',NLO,NV,LINDEX, &
!_COMPLEX                   CONE,B2(NV+1,1),HSROWS,B1,HSROWS, &
!_COMPLEX                   CONE,HS(NV+1,1),HSROWS)
                DO 106 L=1,LINDEX
                  DO 260 I = NV+1, NV+NLO
                     DO 270 J = nv+1, I
!_REAL                        HS(I,J) = HS(I,J) + A1R(J,L)*A2R(I,L) &
!_REAL                                       - A1I(J,L)*A2I(I,L) &
!_REAL                                       + B1R(J,L)*B2R(I,L) &
!_REAL                                       - B1I(J,L)*B2I(I,L) &
!_REAL                                       + C1R(J,L)*C2R(I,L) &
!_REAL                                       - C1I(J,L)*C2I(I,L)
!_COMPLEX                        A1x=A1R(J,L)+CIMAG*(A1I(J,L))
!_COMPLEX                        A2x=A2R(I,L)+CIMAG*(A2I(I,L))
!_COMPLEX                        B1x=B1R(J,L)+CIMAG*(B1I(J,L))
!_COMPLEX                        B2x=B2R(I,L)+CIMAG*(B2I(I,L))
!_COMPLEX                        C1x=C1R(J,L)+CIMAG*(C1I(J,L))
!_COMPLEX                        C2x=C2R(I,L)+CIMAG*(C2I(I,L))
!_COMPLEX                  HS(I,J) = HS(I,J) + A1x*A2x + B1x*B2x + C1x*C2x
  270                CONTINUE
  260             CONTINUE
  106           CONTINUE
#endif
  120    CONTINUE
  110 CONTINUE
      deallocate( A1R, A1I )
      deallocate( A2R, A2I )
      deallocate( B1R, B1I )
      deallocate( B2R, B2I )
      deallocate( C1R, C1I )
      deallocate( C2R, C2I )
!_COMPLEX      deallocate( A1 )
!_COMPLEX      deallocate( A2 )
!_COMPLEX      deallocate( B1 )
!_COMPLEX      deallocate( B2 )
      deallocate( ALMR )
      deallocate( ALMI )
      deallocate( BLMR )
      deallocate( BLMI )
      deallocate( CLMR )
      deallocate( CLMI )
      deallocate( YL )
 999  CONTINUE
      CALL BARRIER
      RETURN
!
!        End of 'HNS'
!
      END
