      SUBROUTINE DA7SST(IV, LIV, LV, V)
      implicit real*8 (a-h,o-z)
!
!  ***  ASSESS CANDIDATE STEP (***SOL VERSION 2.3)  ***
!
      INTEGER LIV, LV
      INTEGER IV(LIV)
      DOUBLE PRECISION V(LV)
!
!  ***  PURPOSE  ***
!
!        THIS SUBROUTINE IS CALLED BY AN UNCONSTRAINED MINIMIZATION
!     ROUTINE TO ASSESS THE NEXT CANDIDATE STEP.  IT MAY RECOMMEND ONE
!     OF SEVERAL COURSES OF ACTION, SUCH AS ACCEPTING THE STEP, RECOM-
!     PUTING IT USING THE SAME OR A NEW QUADRATIC MODEL, OR HALTING DUE
!     TO CONVERGENCE OR FALSE CONVERGENCE.  SEE THE RETURN CODE LISTING
!     BELOW.
!
!--------------------------  PARAMETER USAGE  --------------------------
!
!  IV (I/O) INTEGER PARAMETER AND SCRATCH VECTOR -- SEE DESCRIPTION
!             BELOW OF IV VALUES REFERENCED.
! LIV (IN)  LENGTH OF IV ARRAY.
!  LV (IN)  LENGTH OF V ARRAY.
!   V (I/O) REAL PARAMETER AND SCRATCH VECTOR -- SEE DESCRIPTION
!             BELOW OF V VALUES REFERENCED.
!
!  ***  IV VALUES REFERENCED  ***
!
!    IV(IRC) (I/O) ON INPUT FOR THE FIRST STEP TRIED IN A NEW ITERATION,
!             IV(IRC) SHOULD BE SET TO 3 OR 4 (THE VALUE TO WHICH IT IS
!             SET WHEN STEP IS DEFINITELY TO BE ACCEPTED).  ON INPUT
!             AFTER STEP HAS BEEN RECOMPUTED, IV(IRC) SHOULD BE
!             UNCHANGED SINCE THE PREVIOUS RETURN OF DA7SST.
!                ON OUTPUT, IV(IRC) IS A RETURN CODE HAVING ONE OF THE
!             FOLLOWING VALUES...
!                  1 = SWITCH MODELS OR TRY SMALLER STEP.
!                  2 = SWITCH MODELS OR ACCEPT STEP.
!                  3 = ACCEPT STEP AND DETERMINE V(RADFAC) BY GRADIENT
!                       TESTS.
!                  4 = ACCEPT STEP, V(RADFAC) HAS BEEN DETERMINED.
!                  5 = RECOMPUTE STEP (USING THE SAME MODEL).
!                  6 = RECOMPUTE STEP WITH RADIUS = V(LMAXS) BUT DO NOT
!                       EVALUATE THE OBJECTIVE FUNCTION.
!                  7 = X-CONVERGENCE (SEE V(XCTOL)).
!                  8 = RELATIVE FUNCTION CONVERGENCE (SEE V(RFCTOL)).
!                  9 = BOTH X- AND RELATIVE FUNCTION CONVERGENCE.
!                 10 = ABSOLUTE FUNCTION CONVERGENCE (SEE V(AFCTOL)).
!                 11 = SINGULAR CONVERGENCE (SEE V(LMAXS)).
!                 12 = FALSE CONVERGENCE (SEE V(XFTOL)).
!                 13 = IV(IRC) WAS OUT OF RANGE ON INPUT.
!             RETURN CODE I HAS PRECEDENCE OVER I+1 FOR I = 9, 10, 11.
! IV(MLSTGD) (I/O) SAVED VALUE OF IV(MODEL).
!  IV(MODEL) (I/O) ON INPUT, IV(MODEL) SHOULD BE AN INTEGER IDENTIFYING
!             THE CURRENT QUADRATIC MODEL OF THE OBJECTIVE FUNCTION.
!             IF A PREVIOUS STEP YIELDED A BETTER FUNCTION REDUCTION,
!             THEN IV(MODEL) WILL BE SET TO IV(MLSTGD) ON OUTPUT.
! IV(NFCALL) (IN)  INVOCATION COUNT FOR THE OBJECTIVE FUNCTION.
! IV(NFGCAL) (I/O) VALUE OF IV(NFCALL) AT STEP THAT GAVE THE BIGGEST
!             FUNCTION REDUCTION THIS ITERATION.  IV(NFGCAL) REMAINS
!             UNCHANGED UNTIL A FUNCTION REDUCTION IS OBTAINED.
! IV(RADINC) (I/O) THE NUMBER OF RADIUS INCREASES (OR MINUS THE NUMBER
!             OF DECREASES) SO FAR THIS ITERATION.
! IV(RESTOR) (OUT) SET TO 1 IF V(F) HAS BEEN RESTORED AND X SHOULD BE
!             RESTORED TO ITS INITIAL VALUE, TO 2 IF X SHOULD BE SAVED,
!             TO 3 IF X SHOULD BE RESTORED FROM THE SAVED VALUE, AND TO
!             0 OTHERWISE.
!  IV(STAGE) (I/O) COUNT OF THE NUMBER OF MODELS TRIED SO FAR IN THE
!             CURRENT ITERATION.
! IV(STGLIM) (IN)  MAXIMUM NUMBER OF MODELS TO CONSIDER.
! IV(SWITCH) (OUT) SET TO 0 UNLESS A NEW MODEL IS BEING TRIED AND IT
!             GIVES A SMALLER FUNCTION VALUE THAN THE PREVIOUS MODEL,
!             IN WHICH CASE DA7SST SETS IV(SWITCH) = 1.
! IV(TOOBIG) (I/O)  IS NONZERO ON INPUT IF STEP WAS TOO BIG (E.G., IF
!             IT WOULD CAUSE OVERFLOW).  IT IS SET TO 0 ON RETURN.
!   IV(XIRC) (I/O) VALUE THAT IV(IRC) WOULD HAVE IN THE ABSENCE OF
!             CONVERGENCE, FALSE CONVERGENCE, AND OVERSIZED STEPS.
!
!  ***  V VALUES REFERENCED  ***
!
! V(AFCTOL) (IN)  ABSOLUTE FUNCTION CONVERGENCE TOLERANCE.  IF THE
!             ABSOLUTE VALUE OF THE CURRENT FUNCTION VALUE V(F) IS LESS
!             THAN V(AFCTOL) AND DA7SST DOES NOT RETURN WITH
!             IV(IRC) = 11, THEN DA7SST RETURNS WITH IV(IRC) = 10.
! V(DECFAC) (IN)  FACTOR BY WHICH TO DECREASE RADIUS WHEN IV(TOOBIG) IS
!             NONZERO.
! V(DSTNRM) (IN)  THE 2-NORM OF D*STEP.
! V(DSTSAV) (I/O) VALUE OF V(DSTNRM) ON SAVED STEP.
!   V(DST0) (IN)  THE 2-NORM OF D TIMES THE NEWTON STEP (WHEN DEFINED,
!             I.E., FOR V(NREDUC) .GE. 0).
!      V(F) (I/O) ON BOTH INPUT AND OUTPUT, V(F) IS THE OBJECTIVE FUNC-
!             TION VALUE AT X.  IF X IS RESTORED TO A PREVIOUS VALUE,
!             THEN V(F) IS RESTORED TO THE CORRESPONDING VALUE.
!   V(FDIF) (OUT) THE FUNCTION REDUCTION V(F0) - V(F) (FOR THE OUTPUT
!             VALUE OF V(F) IF AN EARLIER STEP GAVE A BIGGER FUNCTION
!             DECREASE, AND FOR THE INPUT VALUE OF V(F) OTHERWISE).
! V(FLSTGD) (I/O) SAVED VALUE OF V(F).
!     V(F0) (IN)  OBJECTIVE FUNCTION VALUE AT START OF ITERATION.
! V(GTSLST) (I/O) VALUE OF V(GTSTEP) ON SAVED STEP.
! V(GTSTEP) (IN)  INNER PRODUCT BETWEEN STEP AND GRADIENT.
! V(INCFAC) (IN)  MINIMUM FACTOR BY WHICH TO INCREASE RADIUS.
!  V(LMAXS) (IN)  MAXIMUM REASONABLE STEP SIZE (AND INITIAL STEP BOUND).
!             IF THE ACTUAL FUNCTION DECREASE IS NO MORE THAN TWICE
!             WHAT WAS PREDICTED, IF A RETURN WITH IV(IRC) = 7, 8, OR 9
!             DOES NOT OCCUR, IF V(DSTNRM) .GT. V(LMAXS) OR THE CURRENT
!             STEP IS A NEWTON STEP, AND IF
!             V(PREDUC) .LE. V(SCTOL) * ABS(V(F0)), THEN DA7SST RETURNS
!             WITH IV(IRC) = 11.  IF SO DOING APPEARS WORTHWHILE, THEN
!            DA7SST REPEATS THIS TEST (DISALLOWING A FULL NEWTON STEP)
!             WITH V(PREDUC) COMPUTED FOR A STEP OF LENGTH V(LMAXS)
!             (BY A RETURN WITH IV(IRC) = 6).
! V(NREDUC) (I/O)  FUNCTION REDUCTION PREDICTED BY QUADRATIC MODEL FOR
!             NEWTON STEP.  IF DA7SST IS CALLED WITH IV(IRC) = 6, I.E.,
!             IF V(PREDUC) HAS BEEN COMPUTED WITH RADIUS = V(LMAXS) FOR
!             USE IN THE SINGULAR CONVERGENCE TEST, THEN V(NREDUC) IS
!             SET TO -V(PREDUC) BEFORE THE LATTER IS RESTORED.
! V(PLSTGD) (I/O) VALUE OF V(PREDUC) ON SAVED STEP.
! V(PREDUC) (I/O) FUNCTION REDUCTION PREDICTED BY QUADRATIC MODEL FOR
!             CURRENT STEP.
! V(RADFAC) (OUT) FACTOR TO BE USED IN DETERMINING THE NEW RADIUS,
!             WHICH SHOULD BE V(RADFAC)*DST, WHERE  DST  IS EITHER THE
!             OUTPUT VALUE OF V(DSTNRM) OR THE 2-NORM OF
!             DIAG(NEWD)*STEP  FOR THE OUTPUT VALUE OF STEP AND THE
!             UPDATED VERSION, NEWD, OF THE SCALE VECTOR D.  FOR
!             IV(IRC) = 3, V(RADFAC) = 1.0 IS RETURNED.
! V(RDFCMN) (IN)  MINIMUM VALUE FOR V(RADFAC) IN TERMS OF THE INPUT
!             VALUE OF V(DSTNRM) -- SUGGESTED VALUE = 0.1.
! V(RDFCMX) (IN)  MAXIMUM VALUE FOR V(RADFAC) -- SUGGESTED VALUE = 4.0.
!  V(RELDX) (IN) SCALED RELATIVE CHANGE IN X CAUSED BY STEP, COMPUTED
!             (E.G.) BY FUNCTION  DRLDST  AS
!                 MAX (D(I)*ABS(X(I)-X0(I)), 1 .LE. I .LE. P) /
!                    MAX (D(I)*(ABS(X(I))+ABS(X0(I))), 1 .LE. I .LE. P).
! V(RFCTOL) (IN)  RELATIVE FUNCTION CONVERGENCE TOLERANCE.  IF THE
!             ACTUAL FUNCTION REDUCTION IS AT MOST TWICE WHAT WAS PRE-
!             DICTED AND  V(NREDUC) .LE. V(RFCTOL)*ABS(V(F0)),  THEN
!            DA7SST RETURNS WITH IV(IRC) = 8 OR 9.
!  V(SCTOL) (IN)  SINGULAR CONVERGENCE TOLERANCE -- SEE V(LMAXS).
! V(STPPAR) (IN)  MARQUARDT PARAMETER -- 0 MEANS FULL NEWTON STEP.
! V(TUNER1) (IN)  TUNING CONSTANT USED TO DECIDE IF THE FUNCTION
!             REDUCTION WAS MUCH LESS THAN EXPECTED.  SUGGESTED
!             VALUE = 0.1.
! V(TUNER2) (IN)  TUNING CONSTANT USED TO DECIDE IF THE FUNCTION
!             REDUCTION WAS LARGE ENOUGH TO ACCEPT STEP.  SUGGESTED
!             VALUE = 10**-4.
! V(TUNER3) (IN)  TUNING CONSTANT USED TO DECIDE IF THE RADIUS
!             SHOULD BE INCREASED.  SUGGESTED VALUE = 0.75.
!  V(XCTOL) (IN)  X-CONVERGENCE CRITERION.  IF STEP IS A NEWTON STEP
!             (V(STPPAR) = 0) HAVING V(RELDX) .LE. V(XCTOL) AND GIVING
!             AT MOST TWICE THE PREDICTED FUNCTION DECREASE, THEN
!            DA7SST RETURNS IV(IRC) = 7 OR 9.
!  V(XFTOL) (IN)  FALSE CONVERGENCE TOLERANCE.  IF STEP GAVE NO OR ONLY
!             A SMALL FUNCTION DECREASE AND V(RELDX) .LE. V(XFTOL),
!             THEN DA7SST RETURNS WITH IV(IRC) = 12.
!
!-------------------------------  NOTES  -------------------------------
!
!  ***  APPLICATION AND USAGE RESTRICTIONS  ***
!
!        THIS ROUTINE IS CALLED AS PART OF THE NL2SOL (NONLINEAR
!     LEAST-SQUARES) PACKAGE.  IT MAY BE USED IN ANY UNCONSTRAINED
!     MINIMIZATION SOLVER THAT USES DOGLEG, GOLDFELD-QUANDT-TROTTER,
!     OR LEVENBERG-MARQUARDT STEPS.
!
!  ***  ALGORITHM NOTES  ***
!
!        SEE (1) FOR FURTHER DISCUSSION OF THE ASSESSING AND MODEL
!     SWITCHING STRATEGIES.  WHILE NL2SOL CONSIDERS ONLY TWO MODELS,
!    DA7SST IS DESIGNED TO HANDLE ANY NUMBER OF MODELS.
!
!  ***  USAGE NOTES  ***
!
!        ON THE FIRST CALL OF AN ITERATION, ONLY THE I/O VARIABLES
!     STEP, X, IV(IRC), IV(MODEL), V(F), V(DSTNRM), V(GTSTEP), AND
!     V(PREDUC) NEED HAVE BEEN INITIALIZED.  BETWEEN CALLS, NO I/O
!     VALUES EXCEPT STEP, X, IV(MODEL), V(F) AND THE STOPPING TOLER-
!     ANCES SHOULD BE CHANGED.
!        AFTER A RETURN FOR CONVERGENCE OR FALSE CONVERGENCE, ONE CAN
!     CHANGE THE STOPPING TOLERANCES AND CALL DA7SST AGAIN, IN WHICH
!     CASE THE STOPPING TESTS WILL BE REPEATED.
!
!  ***  REFERENCES  ***
!
!     (1) DENNIS, J.E., JR., GAY, D.M., AND WELSCH, R.E. (1981),
!        AN ADAPTIVE NONLINEAR LEAST-SQUARES ALGORITHM,
!        ACM TRANS. MATH. SOFTWARE, VOL. 7, NO. 3.
!
!     (2) POWELL, M.J.D. (1970)  A FORTRAN SUBROUTINE FOR SOLVING
!        SYSTEMS OF NONLINEAR ALGEBRAIC EQUATIONS, IN NUMERICAL
!        METHODS FOR NONLINEAR ALGEBRAIC EQUATIONS, EDITED BY
!        P. RABINOWITZ, GORDON AND BREACH, LONDON.
!
!  ***  HISTORY  ***
!
!        JOHN DENNIS DESIGNED MUCH OF THIS ROUTINE, STARTING WITH
!     IDEAS IN (2). ROY WELSCH SUGGESTED THE MODEL SWITCHING STRATEGY.
!        DAVID GAY AND STEPHEN PETERS CAST THIS SUBROUTINE INTO A MORE
!     PORTABLE FORM (WINTER 1977), AND DAVID GAY CAST IT INTO ITS
!     PRESENT FORM (FALL 1978), WITH MINOR CHANGES TO THE SINGULAR
!     CONVERGENCE TEST IN MAY, 1984 (TO DEAL WITH FULL NEWTON STEPS).
!
!  ***  GENERAL  ***
!
!     THIS SUBROUTINE WAS WRITTEN IN CONNECTION WITH RESEARCH
!     SUPPORTED BY THE NATIONAL SCIENCE FOUNDATION UNDER GRANTS
!     MCS-7600324, DCR75-10143, 76-14311DSS, MCS76-11989, AND
!     MCS-7906671.
!
!------------------------  EXTERNAL QUANTITIES  ------------------------
!
!  ***  NO EXTERNAL FUNCTIONS AND SUBROUTINES  ***
!
!--------------------------  LOCAL VARIABLES  --------------------------
!
      LOGICAL GOODX
      INTEGER I, NFC
      DOUBLE PRECISION EMAX, EMAXS, GTS, RFAC1, XMAX
      DOUBLE PRECISION HALF, ONE, ONEP2, TWO, ZERO
!
!  ***  SUBSCRIPTS FOR IV AND V  ***
!
      INTEGER AFCTOL, DECFAC, DSTNRM, DSTSAV, DST0, F, FDIF, FLSTGD, F0, &
              GTSLST, GTSTEP, INCFAC, IRC, LMAXS, MLSTGD, MODEL, NFCALL, &
              NFGCAL, NREDUC, PLSTGD, PREDUC, RADFAC, RADINC, RDFCMN, &
              RDFCMX, RELDX, RESTOR, RFCTOL, SCTOL, STAGE, STGLIM, &
              STPPAR, SWITCH, TOOBIG, TUNER1, TUNER2, TUNER3, XCTOL, &
              XFTOL, XIRC
!
!  ***  DATA INITIALIZATIONS  ***
!
!/6
!     DATA HALF/0.5D+0/, ONE/1.D+0/, ONEP2/1.2D+0/, TWO/2.D+0/,
!    1     ZERO/0.D+0/
!/7
      PARAMETER (HALF=0.5D+0, ONE=1.D+0, ONEP2=1.2D+0, TWO=2.D+0, &
                 ZERO=0.D+0)
!/
!
!/6
!     DATA IRC/29/, MLSTGD/32/, MODEL/5/, NFCALL/6/, NFGCAL/7/,
!    1     RADINC/8/, RESTOR/9/, STAGE/10/, STGLIM/11/, SWITCH/12/,
!    2     TOOBIG/2/, XIRC/13/
!/7
      PARAMETER (IRC=29, MLSTGD=32, MODEL=5, NFCALL=6, NFGCAL=7, &
                 RADINC=8, RESTOR=9, STAGE=10, STGLIM=11, SWITCH=12, &
                 TOOBIG=2, XIRC=13)
!/
!/6
!     DATA AFCTOL/31/, DECFAC/22/, DSTNRM/2/, DST0/3/, DSTSAV/18/,
!    1     F/10/, FDIF/11/, FLSTGD/12/, F0/13/, GTSLST/14/, GTSTEP/4/,
!    2     INCFAC/23/, LMAXS/36/, NREDUC/6/, PLSTGD/15/, PREDUC/7/,
!    3     RADFAC/16/, RDFCMN/24/, RDFCMX/25/, RELDX/17/, RFCTOL/32/,
!    4     SCTOL/37/, STPPAR/5/, TUNER1/26/, TUNER2/27/, TUNER3/28/,
!    5     XCTOL/33/, XFTOL/34/
!/7
      PARAMETER (AFCTOL=31, DECFAC=22, DSTNRM=2, DST0=3, DSTSAV=18, &
                 F=10, FDIF=11, FLSTGD=12, F0=13, GTSLST=14, GTSTEP=4, &
                 INCFAC=23, LMAXS=36, NREDUC=6, PLSTGD=15, PREDUC=7, &
                 RADFAC=16, RDFCMN=24, RDFCMX=25, RELDX=17, RFCTOL=32, &
                 SCTOL=37, STPPAR=5, TUNER1=26, TUNER2=27, TUNER3=28, &
                 XCTOL=33, XFTOL=34)
!/
!
!+++++++++++++++++++++++++++++++  BODY  ++++++++++++++++++++++++++++++++
!
      NFC = IV(NFCALL)
      IV(SWITCH) = 0
      IV(RESTOR) = 0
      RFAC1 = ONE
      GOODX = .TRUE.
      I = IV(IRC)
      IF (I .GE. 1 .AND. I .LE. 12) &
                   GO TO (20,30,10,10,40,280,220,220,220,220,220,170), I
         IV(IRC) = 13
         GO TO 999
!
!  ***  INITIALIZE FOR NEW ITERATION  ***
!
 10   IV(STAGE) = 1
      IV(RADINC) = 0
      V(FLSTGD) = V(F0)
      IF (IV(TOOBIG) .EQ. 0) GO TO 110
         IV(STAGE) = -1
         IV(XIRC) = I
         GO TO 60
!
!  ***  STEP WAS RECOMPUTED WITH NEW MODEL OR SMALLER RADIUS  ***
!  ***  FIRST DECIDE WHICH  ***
!
 20   IF (IV(MODEL) .NE. IV(MLSTGD)) GO TO 30
!        ***  OLD MODEL RETAINED, SMALLER RADIUS TRIED  ***
!        ***  DO NOT CONSIDER ANY MORE NEW MODELS THIS ITERATION  ***
!D         Write(8,*)'DA7SST 1'
         IV(STAGE) = IV(STGLIM)
         IV(RADINC) = -1
         GO TO 110
!
!  ***  A NEW MODEL IS BEING TRIED.  DECIDE WHETHER TO KEEP IT.  ***
!
 30   IV(STAGE) = IV(STAGE) + 1
!
!     ***  NOW WE ADD THE POSSIBILITY THAT STEP WAS RECOMPUTED WITH  ***
!     ***  THE SAME MODEL, PERHAPS BECAUSE OF AN OVERSIZED STEP.     ***
!
 40   IF (IV(STAGE) .GT. 0) GO TO 50
!
!        ***  STEP WAS RECOMPUTED BECAUSE IT WAS TOO BIG.  ***
!
         IF (IV(TOOBIG) .NE. 0) GO TO 60
!
!        ***  RESTORE IV(STAGE) AND PICK UP WHERE WE LEFT OFF.  ***
!
         IV(STAGE) = -IV(STAGE)
         I = IV(XIRC)
         GO TO (20, 30, 110, 110, 70), I
!
 50   IF (IV(TOOBIG) .EQ. 0) GO TO 70
!
!  ***  HANDLE OVERSIZE STEP  ***
!
      IV(TOOBIG) = 0
      IF (IV(RADINC) .GT. 0) GO TO 80
         IV(STAGE) = -IV(STAGE)
         IV(XIRC) = IV(IRC)
!
 60      IV(TOOBIG) = 0
         V(RADFAC) = V(DECFAC)
         IV(RADINC) = IV(RADINC) - 1
         IV(IRC) = 5
         IV(RESTOR) = 1
         V(F) = V(FLSTGD)
         GO TO 999
!
 70   IF (V(F) .LT. V(FLSTGD)) GO TO 110
!
!     *** THE NEW STEP IS A LOSER.  RESTORE OLD MODEL.  ***
!
      IF (IV(MODEL) .EQ. IV(MLSTGD)) GO TO 80
         IV(MODEL) = IV(MLSTGD)
         IV(SWITCH) = 1
!
!     ***  RESTORE STEP, ETC. ONLY IF A PREVIOUS STEP DECREASED V(F).
!
 80   IF (V(FLSTGD) .GE. V(F0)) GO TO 110
         IV(RESTOR) = 1
         V(F) = V(FLSTGD)
         V(PREDUC) = V(PLSTGD)
         V(GTSTEP) = V(GTSLST)
         IF (IV(SWITCH) .EQ. 0) RFAC1 = V(DSTNRM) / V(DSTSAV)
         V(DSTNRM) = V(DSTSAV)
         NFC = IV(NFGCAL)
         GOODX = .FALSE.
!
 110  V(FDIF) = V(F0) - V(F)
      IF (V(FDIF) .GT. V(TUNER2) * V(PREDUC)) GO TO 140
      IF (IV(RADINC) .GT. 0) GO TO 140
!
!        ***  NO (OR ONLY A TRIVIAL) FUNCTION DECREASE
!        ***  -- SO TRY NEW MODEL OR SMALLER RADIUS
!
         IF (V(F) .LT. V(F0)) GO TO 120
              IV(MLSTGD) = IV(MODEL)
              V(FLSTGD) = V(F)
              V(F) = V(F0)
              IV(RESTOR) = 1
              GO TO 130
 120     IV(NFGCAL) = NFC
 130     IV(IRC) = 1
         IF (IV(STAGE) .LT. IV(STGLIM)) GO TO 160
              IV(IRC) = 5
              IV(RADINC) = IV(RADINC) - 1
              GO TO 160
!
!  ***  NONTRIVIAL FUNCTION DECREASE ACHIEVED  ***
!
 140  IV(NFGCAL) = NFC
      RFAC1 = ONE
      V(DSTSAV) = V(DSTNRM)
!D      write(8,*)'DA7SST 2 ',V(FDIF),V(PREDUC)*V(TUNER1)
      IF (V(FDIF) .GT. V(PREDUC)*V(TUNER1)) GO TO 190
!
!  ***  DECREASE WAS MUCH LESS THAN PREDICTED -- EITHER CHANGE MODELS
!  ***  OR ACCEPT STEP WITH DECREASED RADIUS.
!
      IF (IV(STAGE) .GE. IV(STGLIM)) GO TO 150
!        ***  CONSIDER SWITCHING MODELS  ***
         IV(IRC) = 2
         GO TO 160
!
!     ***  ACCEPT STEP WITH DECREASED RADIUS  ***
!
 150  IV(IRC) = 4
!
!  ***  SET V(RADFAC) TO FLETCHER*S DECREASE FACTOR  ***
!
 160  IV(XIRC) = IV(IRC)
      EMAX = V(GTSTEP) + V(FDIF)
      V(RADFAC) = HALF * RFAC1
      IF (EMAX .LT. V(GTSTEP)) V(RADFAC) = RFAC1 * DMAX1(V(RDFCMN), &
                                                 HALF * V(GTSTEP)/EMAX)
!D        write(8,*)'DA7SST Reducing step ',V(RADFAC)
!
!  ***  DO FALSE CONVERGENCE TEST  ***
!
 170  IF (V(RELDX) .LE. V(XFTOL)) GO TO 180
         IV(IRC) = IV(XIRC)
         IF (V(F) .LT. V(F0)) GO TO 200
              GO TO 230
!
 180  IV(IRC) = 12
      GO TO 240
!
!  ***  HANDLE GOOD FUNCTION DECREASE  ***
!
 190	CONTINUE
!D      write(8,*)'DA7SST Good ',V(FDIF),-V(TUNER3)*V(GTSTEP),V(TUNER3)
        IF (V(FDIF) .LT. (-V(TUNER3) * V(GTSTEP))) GO TO 210
!
!     ***  INCREASING RADIUS LOOKS WORTHWHILE.  SEE IF WE JUST
!     ***  RECOMPUTED STEP WITH A DECREASED RADIUS OR RESTORED STEP
!     ***  AFTER RECOMPUTING IT WITH A LARGER RADIUS.
!
!D      write(8,*)'DA7SST Probes for good ',iv(RADINC),iv(RESTOR)
      IF (IV(RADINC) .LT. 0) GO TO 210
      IF (IV(RESTOR) .EQ. 1) GO TO 210
!
!        ***  WE DID NOT.  TRY A LONGER STEP UNLESS THIS WAS A NEWTON
!        ***  STEP.
!
         V(RADFAC) = V(RDFCMX)
         GTS = V(GTSTEP)
         IF (V(FDIF) .LT. (HALF/V(RADFAC) - ONE) * GTS) &
                  V(RADFAC) = DMAX1(V(INCFAC), HALF*GTS/(GTS + V(FDIF)))
         IV(IRC) = 4
!D         write(8,*)'DA7SST Probes for good 2 ',V(STPPAR),V(DST0),
!D    1  TWO*V(DSTNRM),V(NREDUC),ONEP2*V(FDIF)
         IF (V(STPPAR) .EQ. ZERO) GO TO 230
         IF (V(DST0) .GE. ZERO .AND. (V(DST0) .LT. TWO*V(DSTNRM) &
                   .OR. V(NREDUC) .LT. ONEP2*V(FDIF)))  GO TO 230
!             ***  STEP WAS NOT A NEWTON STEP.  RECOMPUTE IT WITH
!             ***  A LARGER RADIUS.
              IV(IRC) = 5
              IV(RADINC) = IV(RADINC) + 1
!D        write(8,*)'DA7SST Increasing step'
!
!  ***  SAVE VALUES CORRESPONDING TO GOOD STEP  ***
!
 200  V(FLSTGD) = V(F)
      IV(MLSTGD) = IV(MODEL)
      IF (IV(RESTOR) .NE. 1) IV(RESTOR) = 2
      V(DSTSAV) = V(DSTNRM)
      IV(NFGCAL) = NFC
      V(PLSTGD) = V(PREDUC)
      V(GTSLST) = V(GTSTEP)
      GO TO 230
!
!  ***  ACCEPT STEP WITH RADIUS UNCHANGED  ***
!
 210  V(RADFAC) = ONE
      IV(IRC) = 3
!D      write(8,*)'DA7SST accepting step'
      GO TO 230
!
!  ***  COME HERE FOR A RESTART AFTER CONVERGENCE  ***
!
 220  IV(IRC) = IV(XIRC)
      IF (V(DSTSAV) .GE. ZERO) GO TO 240
         IV(IRC) = 12
         GO TO 240
!
!  ***  PERFORM CONVERGENCE TESTS  ***
!
 230  IV(XIRC) = IV(IRC)
 240  IF (IV(RESTOR) .EQ. 1 .AND. V(FLSTGD) .LT. V(F0)) IV(RESTOR) = 3
      IF (DABS(V(F)) .LT. V(AFCTOL)) IV(IRC) = 10
      IF (HALF * V(FDIF) .GT. V(PREDUC)) GO TO 999
      EMAX = V(RFCTOL) * DABS(V(F0))
      EMAXS = V(SCTOL) * DABS(V(F0))
      IF (V(PREDUC) .LE. EMAXS .AND. (V(DSTNRM) .GT. V(LMAXS) .OR. &
           V(STPPAR) .EQ. ZERO)) IV(IRC) = 11
      IF (V(DST0) .LT. ZERO) GO TO 250
      I = 0
      IF ((V(NREDUC) .GT. ZERO .AND. V(NREDUC) .LE. EMAX) .OR. &
          (V(NREDUC) .EQ. ZERO .AND. V(PREDUC) .EQ. ZERO))  I = 2
      IF (V(STPPAR) .EQ. ZERO .AND. V(RELDX) .LE. V(XCTOL) &
                              .AND. GOODX)                  I = I + 1
      IF (I .GT. 0) IV(IRC) = I + 6
!
!  ***  CONSIDER RECOMPUTING STEP OF LENGTH V(LMAXS) FOR SINGULAR
!  ***  CONVERGENCE TEST.
!
 250  IF (IV(IRC) .GT. 5 .AND. IV(IRC) .NE. 12) GO TO 999
      IF (V(STPPAR) .EQ. ZERO) GO TO 999
      IF (V(DSTNRM) .GT. V(LMAXS)) GO TO 260
         IF (V(PREDUC) .GE. EMAXS) GO TO 999
              IF (V(DST0) .LE. ZERO) GO TO 270
                   IF (HALF * V(DST0) .LE. V(LMAXS)) GO TO 999
                        GO TO 270
 260  IF (HALF * V(DSTNRM) .LE. V(LMAXS)) GO TO 999
      XMAX = V(LMAXS) / V(DSTNRM)
      IF (XMAX * (TWO - XMAX) * V(PREDUC) .GE. EMAXS) GO TO 999
 270  IF (V(NREDUC) .LT. ZERO) GO TO 290
!
!  ***  RECOMPUTE V(PREDUC) FOR USE IN SINGULAR CONVERGENCE TEST  ***
!
      V(GTSLST) = V(GTSTEP)
      V(DSTSAV) = V(DSTNRM)
      IF (IV(IRC) .EQ. 12) V(DSTSAV) = -V(DSTSAV)
      V(PLSTGD) = V(PREDUC)
      I = IV(RESTOR)
      IV(RESTOR) = 2
      IF (I .EQ. 3) IV(RESTOR) = 0
      IV(IRC) = 6
      GO TO 999
!
!  ***  PERFORM SINGULAR CONVERGENCE TEST WITH RECOMPUTED V(PREDUC)  ***
!
 280  V(GTSTEP) = V(GTSLST)
      V(DSTNRM) = DABS(V(DSTSAV))
      IV(IRC) = IV(XIRC)
      IF (V(DSTSAV) .LE. ZERO) IV(IRC) = 12
      V(NREDUC) = -V(PREDUC)
      V(PREDUC) = V(PLSTGD)
      IV(RESTOR) = 3
 290  IF (-V(NREDUC) .LE. V(SCTOL) * DABS(V(F0))) IV(IRC) = 11
!
 999  RETURN
!
!  ***  LAST LINE OF DA7SST FOLLOWS  ***
      END

